// Kyle simpsons YDKJSY

Three important pillars of JS
1. the scope system  2. function closures  3. module design pattern

~ JS is parsed/compiled in a separate phase before execution begins.

~ JS functions are first-class values, i.e. they can be assigned and passed
   around just like numbers and strings. But since these functions hold and 
   access variables, they maintain their original scope no matter where in the 
   program the functions are eventually executed. This is called CLOSURE.

~ Modules are a code organization pattern characterzied by public methods that 
   have privileged access (via closure) to hidden variables and functions in the 
   internal scope of the module.

// just a rough intro or scratch 
~ Compiler theory has 3 stage:
   1. Tokenizing/Lexing    2. Parsing     3. Code Generation

   1. Lexing : breaking up a string of characters into meaningful chunks, called
    tokens.
      for ex - 
      var a = 2;

      ^
      |
   this can be broken into following: 

   var, a, =, 2 and ;

   whitespace may or may not be, depending if its useful or not.


   2. Parsing: taking a stream (array) of tokens and turning it into a tree of 
      nested elements, which collectively represent the grammatical structure of 
      the program. This is called an Abstract Syntax Tree.

   3. Code Generation: taking an AST and turning it into executable
      code. This part varies greatly depending on the language, the
      platform it's targeting, and other factors.
      
      The JS engine takes the just described AST for var a = 2; and turns
      it into a set of machine instructions to actually create a variable
      called a (including reserving memory, etc.), and then store a value
      into a .

// by Jonas 
~  What is scope?
   Scope is the space or environment in which a certain variable is declared.

~  Scoping controls how program's variables are organized & accessed by the JS 
   engine.

~  Scope of a variable: region our codw where a certain variable can be accessed.

~  Lexical scoping: scoping is controlled by placement of functions and blocks 
   in the code.

   Three types of scoping:
   1. Global         2. Function          3. Block

   1. Global : 
      ~ outside of any functions or blocks
      ~ variable declared in global scope are accessible everywhere

   2. Function : 
      ~ variable are accessible only inside function, NOT outside, also called 
      local scope.

   3. Block : 
      ~ variables are accessible only inside block, 
      ~ only applies to "const" and "let" keywords because var is function scoped.


   NOTE: VAR IS FUNCTION SCOPED
         CONST AND LET ARE BLOCK SCOPED

   NOTE: variable created with "var" creates a property on the window object
         but not with the "const" and "let"